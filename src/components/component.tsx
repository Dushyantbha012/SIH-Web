/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/Je7jhJ1p7i6
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Libre_Franklin } from 'next/font/google'
import { Arimo } from 'next/font/google'

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

arimo({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useMemo } from "react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Accordion, AccordionItem, AccordionTrigger, AccordionContent } from "@/components/ui/accordion"
import { Label } from "@/components/ui/label"
import { Checkbox } from "@/components/ui/checkbox"
import { Badge } from "@/components/ui/badge"
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuCheckboxItem, DropdownMenuRadioGroup, DropdownMenuRadioItem } from "@/components/ui/dropdown-menu"
import { Card, CardHeader, CardContent, CardFooter } from "@/components/ui/card"
import { Separator } from "@/components/ui/separator"

export function Component() {
  const [selectedFilters, setSelectedFilters] = useState({
    location: [],
    jobType: [],
    salary: [],
  })
  const [sortBy, setSortBy] = useState("relevance")
  const handleFilterChange = (type, value) => {
    setSelectedFilters((prevFilters) => ({
      ...prevFilters,
      [type]: prevFilters[type].includes(value)
        ? prevFilters[type].filter((item) => item !== value)
        : [...prevFilters[type], value],
    }))
  }
  const handleSortChange = (value) => {
    setSortBy(value)
  }
  const jobs = [
    {
      id: 1,
      company: "Acme Inc.",
      title: "Senior Software Engineer",
      type: "Full-time",
      location: "Remote",
      salary: "100k - 150k",
    },
    {
      id: 2,
      company: "Globex Corporation",
      title: "Product Manager - Enterprise Solutions",
      type: "Full-time",
      location: "San Francisco, CA",
      salary: "120k - 160k",
    },
    {
      id: 3,
      company: "Stark Industries",
      title: "UX Designer - Augmented Reality",
      type: "Contract",
      location: "New York, NY",
      salary: "80k - 120k",
    },
    {
      id: 4,
      company: "Umbrella Corporation",
      title: "Data Science Intern - Bioinformatics",
      type: "Internship",
      location: "Remote",
      salary: "Unpaid",
    },
  ]
  const filteredJobs = useMemo(() => {
    return jobs
      .filter((job) => {
        if (selectedFilters.location.length > 0 && !selectedFilters.location.includes(job.location)) {
          return false
        }
        if (selectedFilters.jobType.length > 0 && !selectedFilters.jobType.includes(job.type)) {
          return false
        }
        if (selectedFilters.salary.length > 0 && !selectedFilters.salary.includes(job.salary)) {
          return false
        }
        return true
      })
      .sort((a, b) => {
        switch (sortBy) {
          case "relevance":
            return 0
          case "newest":
            return new Date(b.createdAt) - new Date(a.createdAt)
          case "salary":
            return parseFloat(b.salary.split("-")[0]) - parseFloat(a.salary.split("-")[0])
          default:
            return 0
        }
      })
  }, [selectedFilters, sortBy, jobs])
  return (
    <div className="flex flex-col min-h-screen bg-muted">
      <header className="sticky top-0 z-30 flex h-16 items-center gap-4 border-b bg-background px-4 md:px-6">
        <Link href="#" className="flex items-center gap-2 text-lg font-semibold" prefetch={false}>
          <BriefcaseIcon className="w-6 h-6" />
          <span className="sr-only">Job Board</span>
        </Link>
        <nav className="ml-auto flex items-center gap-4">
          <Link href="#" className="text-muted-foreground hover:text-foreground" prefetch={false}>
            Browse Jobs
          </Link>
          <Link href="#" className="text-muted-foreground hover:text-foreground" prefetch={false}>
            Companies
          </Link>
          <Link href="#" className="text-muted-foreground hover:text-foreground" prefetch={false}>
            My Applications
          </Link>
          <Button variant="ghost" size="icon" className="rounded-full">
            <img
              src="/placeholder.svg"
              width="32"
              height="32"
              className="rounded-full"
              alt="Avatar"
              style={{ aspectRatio: "32/32", objectFit: "cover" }}
            />
            <span className="sr-only">Toggle user menu</span>
          </Button>
        </nav>
      </header>
      <main className="flex-1 grid grid-cols-[240px_1fr] gap-8 p-6 md:p-10">
        <div className="space-y-6">
          <div className="grid gap-2">
            <h2 className="text-lg font-semibold">Filters</h2>
            <Accordion type="single" collapsible>
              <AccordionItem value="location">
                <AccordionTrigger className="text-base">Location</AccordionTrigger>
                <AccordionContent>
                  <div className="grid gap-2">
                    <Label className="flex items-center gap-2 font-normal">
                      <Checkbox
                        checked={selectedFilters.location.includes("Remote")}
                        onCheckedChange={() => handleFilterChange("location", "Remote")}
                      />
                      Remote
                    </Label>
                    <Label className="flex items-center gap-2 font-normal">
                      <Checkbox
                        checked={selectedFilters.location.includes("San Francisco")}
                        onCheckedChange={() => handleFilterChange("location", "San Francisco")}
                      />
                      San Francisco
                    </Label>
                    <Label className="flex items-center gap-2 font-normal">
                      <Checkbox
                        checked={selectedFilters.location.includes("New York")}
                        onCheckedChange={() => handleFilterChange("location", "New York")}
                      />
                      New York
                    </Label>
                    <Label className="flex items-center gap-2 font-normal">
                      <Checkbox
                        checked={selectedFilters.location.includes("London")}
                        onCheckedChange={() => handleFilterChange("location", "London")}
                      />
                      London
                    </Label>
                  </div>
                </AccordionContent>
              </AccordionItem>
              <AccordionItem value="job-type">
                <AccordionTrigger className="text-base">Job Type</AccordionTrigger>
                <AccordionContent>
                  <div className="grid gap-2">
                    <Label className="flex items-center gap-2 font-normal">
                      <Checkbox
                        checked={selectedFilters.jobType.includes("Full-time")}
                        onCheckedChange={() => handleFilterChange("jobType", "Full-time")}
                      />
                      Full-time
                    </Label>
                    <Label className="flex items-center gap-2 font-normal">
                      <Checkbox
                        checked={selectedFilters.jobType.includes("Part-time")}
                        onCheckedChange={() => handleFilterChange("jobType", "Part-time")}
                      />
                      Part-time
                    </Label>
                    <Label className="flex items-center gap-2 font-normal">
                      <Checkbox
                        checked={selectedFilters.jobType.includes("Contract")}
                        onCheckedChange={() => handleFilterChange("jobType", "Contract")}
                      />
                      Contract
                    </Label>
                    <Label className="flex items-center gap-2 font-normal">
                      <Checkbox
                        checked={selectedFilters.jobType.includes("Internship")}
                        onCheckedChange={() => handleFilterChange("jobType", "Internship")}
                      />
                      Internship
                    </Label>
                  </div>
                </AccordionContent>
              </AccordionItem>
              <AccordionItem value="salary">
                <AccordionTrigger className="text-base">Salary</AccordionTrigger>
                <AccordionContent>
                  <div className="grid gap-2">
                    <Label className="flex items-center gap-2 font-normal">
                      <Checkbox
                        checked={selectedFilters.salary.includes("50k - 100k")}
                        onCheckedChange={() => handleFilterChange("salary", "50k - 100k")}
                      />
                      $50k - $100k
                    </Label>
                    <Label className="flex items-center gap-2 font-normal">
                      <Checkbox
                        checked={selectedFilters.salary.includes("100k - 150k")}
                        onCheckedChange={() => handleFilterChange("salary", "100k - 150k")}
                      />
                      $100k - $150k
                    </Label>
                    <Label className="flex items-center gap-2 font-normal">
                      <Checkbox
                        checked={selectedFilters.salary.includes("150k+")}
                        onCheckedChange={() => handleFilterChange("salary", "150k+")}
                      />
                      $150k+
                    </Label>
                  </div>
                </AccordionContent>
              </AccordionItem>
            </Accordion>
          </div>
          <div className="grid gap-2">
            <h2 className="text-lg font-semibold">Recommended for you</h2>
            <div className="grid gap-2">
              <Link
                href="#"
                className="flex items-center gap-2 text-muted-foreground hover:text-foreground"
                prefetch={false}
              >
                <BriefcaseIcon className="w-5 h-5" />
                <span>Software Engineer</span>
              </Link>
              <Link
                href="#"
                className="flex items-center gap-2 text-muted-foreground hover:text-foreground"
                prefetch={false}
              >
                <BriefcaseIcon className="w-5 h-5" />
                <span>Product Manager</span>
              </Link>
              <Link
                href="#"
                className="flex items-center gap-2 text-muted-foreground hover:text-foreground"
                prefetch={false}
              >
                <BriefcaseIcon className="w-5 h-5" />
                <span>UX Designer</span>
              </Link>
              <Link
                href="#"
                className="flex items-center gap-2 text-muted-foreground hover:text-foreground"
                prefetch={false}
              >
                <BriefcaseIcon className="w-5 h-5" />
                <span>Data Analyst</span>
              </Link>
            </div>
          </div>
        </div>
        <div className="grid gap-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <h1 className="text-2xl font-bold">Browse Jobs</h1>
              <Badge variant="outline" className="text-sm">
                {filteredJobs.length} jobs
              </Badge>
            </div>
            <div className="flex items-center gap-2">
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="outline" size="sm" className="h-8 gap-1">
                    <FilterIcon className="w-4 h-4" />
                    <span>Filter</span>
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end">
                  <DropdownMenuLabel>Filter by</DropdownMenuLabel>
                  <DropdownMenuSeparator />
                  <DropdownMenuCheckboxItem
                    checked={selectedFilters.jobType.includes("Full-time")}
                    onCheckedChange={() => handleFilterChange("jobType", "Full-time")}
                  >
                    Full-time
                  </DropdownMenuCheckboxItem>
                  <DropdownMenuCheckboxItem
                    checked={selectedFilters.jobType.includes("Part-time")}
                    onCheckedChange={() => handleFilterChange("jobType", "Part-time")}
                  >
                    Part-time
                  </DropdownMenuCheckboxItem>
                  <DropdownMenuCheckboxItem
                    checked={selectedFilters.jobType.includes("Contract")}
                    onCheckedChange={() => handleFilterChange("jobType", "Contract")}
                  >
                    Contract
                  </DropdownMenuCheckboxItem>
                  <DropdownMenuCheckboxItem
                    checked={selectedFilters.jobType.includes("Internship")}
                    onCheckedChange={() => handleFilterChange("jobType", "Internship")}
                  >
                    Internship
                  </DropdownMenuCheckboxItem>
                </DropdownMenuContent>
              </DropdownMenu>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="outline" size="sm" className="h-8 gap-1">
                    <ListOrderedIcon className="w-4 h-4" />
                    <span>Sort</span>
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end">
                  <DropdownMenuLabel>Sort by</DropdownMenuLabel>
                  <DropdownMenuSeparator />
                  <DropdownMenuRadioGroup value={sortBy} onValueChange={handleSortChange}>
                    <DropdownMenuRadioItem value="relevance">Relevance</DropdownMenuRadioItem>
                    <DropdownMenuRadioItem value="newest">Newest</DropdownMenuRadioItem>
                    <DropdownMenuRadioItem value="salary">Salary</DropdownMenuRadioItem>
                  </DropdownMenuRadioGroup>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>
          <div className="grid gap-4">
            {filteredJobs.map((job) => (
              <Card key={job.id} className="bg-white text-blue-500">
                <CardHeader className="flex flex-col items-start justify-between">
                  <div className="flex flex-col items-start gap-2">
                    <div className="font-medium text-lg">{job.company}</div>
                    <div className="text-base text-muted-foreground">{job.title.split(" - ")[1]}</div>
                  </div>
                  <Badge variant="outline" className="text-sm">
                    {job.type}
                  </Badge>
                </CardHeader>
                <CardContent>
                  <div className="grid gap-2">
                    <h3 className="text-lg font-semibold">{job.title.split(" - ")[0]}</h3>
                    <p className="text-muted-foreground">
                      We're looking for an experienced software engineer to join our growing team. You'll be responsible
                      for building scalable and maintainable web applications using modern technologies.
                    </p>
                    <div className="flex items-center gap-2 text-sm text-muted-foreground">
                      <LocateIcon className="w-4 h-4" />
                      <span>{job.location}</span>
                      <Separator orientation="vertical" className="h-4" />
                      <DollarSignIcon className="w-4 h-4" />
                      <span>{job.salary}</span>
                    </div>
                  </div>
                </CardContent>
                <CardFooter className="flex items-center justify-between">
                  <Button variant="outline" size="sm">
                    Apply Now
                  </Button>
                  <Button variant="ghost" size="icon" className="rounded-full">
                    <HeartIcon className="w-5 h-5" />
                    <span className="sr-only">Save job</span>
                  </Button>
                </CardFooter>
              </Card>
            ))}
          </div>
        </div>
      </main>
    </div>
  )
}

function BriefcaseIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M16 20V4a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16" />
      <rect width="20" height="14" x="2" y="6" rx="2" />
    </svg>
  )
}


function DollarSignIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <line x1="12" x2="12" y1="2" y2="22" />
      <path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6" />
    </svg>
  )
}


function FilterIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3" />
    </svg>
  )
}


function HeartIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z" />
    </svg>
  )
}


function ListOrderedIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <line x1="10" x2="21" y1="6" y2="6" />
      <line x1="10" x2="21" y1="12" y2="12" />
      <line x1="10" x2="21" y1="18" y2="18" />
      <path d="M4 6h1v4" />
      <path d="M4 10h2" />
      <path d="M6 18H4c0-1 2-2 2-3s-1-1.5-2-1" />
    </svg>
  )
}


function LocateIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <line x1="2" x2="5" y1="12" y2="12" />
      <line x1="19" x2="22" y1="12" y2="12" />
      <line x1="12" x2="12" y1="2" y2="5" />
      <line x1="12" x2="12" y1="19" y2="22" />
      <circle cx="12" cy="12" r="7" />
    </svg>
  )
}
